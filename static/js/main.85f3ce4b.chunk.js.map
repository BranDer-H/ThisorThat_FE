{"version":3,"sources":["atom/Atoms.ts","Presenter/ChatScreen.tsx","Presenter/Login.tsx","Container/LoginContainer.tsx","Container/ChatScreenContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["userNickname","atom","key","default","msgHistory","ChatContents","styled","div","MyChatBlock","OthersChatBlock","ChatUserName","ChatUserContents","ChatMyContents","ChatTime","time","ChatEnterInform","Chatinput","Input","Search","ChatScreen","message","onRegisterNewMsg","setMessage","userName","curUserName","useRecoilValue","convertTime","date","Date","hour","Number","String","getHours","slice","minute","getMinutes","useEffect","window","scrollTo","top","document","body","scrollHeight","left","behavior","map","msg","informMsg","enterMsg","uuidv4","src","charCodeAt","shape","style","backgroundColor","verticalAlign","marginTop","marginLeft","size","gap","substr","display","flexDirection","content","timeStamp","alignItems","placeholder","value","allowClear","autoFocus","enterButton","onChange","e","target","onPressEnter","length","nowTime","now","newMsgObj","position","bottom","LoginForm","form","LoginTitle","LoginInput","LoginSubmit","input","Login","setUserNickname","onRegisterNickName","onSubmit","type","socket","WebSocket","LoginContainer","setLoginState","useRecoilState","userLoginName","msgHistoryArr","setMsgHistory","onmessage","evt","JSON","parse","data","messageType","alert","onopen","console","log","preventDefault","send","stringify","name","ChatScreenContainer","useState","response","timestamp","msgInfo","newMessage","App","loginState","videoStart","setVideoStart","className","width","overflow","url","playing","loop","controls","muted","height","onReady","onStart","setTimeout","onPlay","onError","transition","zIndex","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.85f3ce4b.chunk.js","sourcesContent":["import { atom } from 'recoil';\nimport { Message } from '../interface/types';\n\nexport const userNickname = atom<string>({\n  key: 'userNickName',\n  default: '',\n});\n\nexport const msgHistory = atom<Message[]>({\n  key: 'msgHistory',\n  default: [],\n});\n","import React, { useEffect } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport { v4 as uuidv4 } from 'uuid';\nimport 'moment/locale/ko';\nimport { Input, Avatar } from 'antd';\nimport { ChatProps, Message } from '../interface/types';\n\nimport { userNickname } from '../atom/Atoms';\n\nimport 'antd/dist/antd.css';\n\nconst ChatContents = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-bottom: 2.5rem;\n`;\n\nconst MyChatBlock = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  font-family: 'cookie';\n  font-size: 18px;\n  margin-bottom: 0.5rem;\n`;\n\nconst OthersChatBlock = styled.div`\n  display: flex;\n  font-family: 'cookie';\n  font-size: 18px;\n  margin-bottom: 0.5rem;\n`;\n\nconst ChatUserName = styled.div`\n  font-size: 13px;\n  font-weight: 600;\n  margin-left: 0.4rem;\n  margin-bottom: 0.2rem;\n`;\n\nconst ChatUserContents = styled.div`\n  position: relative;\n  padding: 0.5rem 1rem;\n  margin-left: 1.3rem;\n  background: slategray;\n  border-radius: 10px;\n  &:after {\n    border-top: 10px solid slategray;\n    border-left: 15px solid transparent;\n    border-right: 0px solid transparent;\n    border-bottom: 0px solid transparent;\n    content: '';\n    position: absolute;\n    top: 10px;\n    left: -15px;\n  }\n`;\n\nconst ChatMyContents = styled.div`\n  position: relative;\n  padding: 0.5rem 1rem;\n  margin: 0 1.3rem 0 0.8rem;\n  background: slategray;\n  border-radius: 10px;\n  &:after {\n    border-top: 10px solid slategray;\n    border-left: 0px solid transparent;\n    border-right: 15px solid transparent;\n    border-bottom: 0px solid transparent;\n    content: '';\n    position: absolute;\n    top: 10px;\n    right: -15px;\n  }\n`;\n\nconst ChatTime = styled.time`\n  margin: 1.55rem 0 0 0.5rem;\n  justify-content: center;\n  font-size: 14px;\n  color: steelblue;\n`;\n\nconst ChatEnterInform = styled.div`\n  color: black;\n  font-family: 'cookie';\n  font-weight: 600;\n  background-color: gainsboro;\n  margin: 1rem auto;\n  padding: 0.8rem;\n  border-radius: 30px;\n`;\n\nconst Chatinput = styled(Input.Search)`\n  & button {\n    background-color: yellow;\n    border: 1px solid yellow;\n    color: black;\n  }\n`;\n\nconst ChatScreen = ({\n  msgHistory,\n  message,\n  onRegisterNewMsg,\n  setMessage,\n  userName,\n}: ChatProps) => {\n  const curUserName = useRecoilValue(userNickname);\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setMessage(e.target.value);\n  };\n\n  const convertTime = (time: number) => {\n    const date = new Date(time);\n    const hour = Number(`0${String(date.getHours())}`.slice(-2));\n    const minute = `0${String(date.getMinutes())}`.slice(-2);\n    return hour > 12 ? `${hour - 12} : ${minute} pm` : `${hour} : ${minute} am`;\n  };\n\n  useEffect(() => {\n    window.scrollTo({\n      top: document.body.scrollHeight,\n      left: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  return (\n    <>\n      <ChatContents>\n        {msgHistory.map((msg: Message) =>\n          msg.informMsg === true\n            ? (msg.enterMsg && (\n                <ChatEnterInform key={uuidv4()}>\n                  👋 {msg.userName} 마시멜로우가 꼬챙이에 끼워졌습니다.\n                </ChatEnterInform>\n              )) || (\n                <ChatEnterInform key={uuidv4()}>\n                  👋 {msg.userName} 마시멜로우가 녹아 없어졌습니다.\n                </ChatEnterInform>\n              )\n            : (curUserName !== msg.userName && (\n                <OthersChatBlock key={uuidv4()}>\n                  <Avatar\n                    src={`./${msg.userName.charCodeAt(0) % 7}.jpg`}\n                    shape=\"square\"\n                    style={{\n                      backgroundColor: 'slategray',\n                      verticalAlign: 'middle',\n                      marginTop: '0.3rem',\n                      marginLeft: '0.3rem',\n                    }}\n                    size={40}\n                    gap={4}\n                  >\n                    {msg.userName.substr(0, 1)}\n                  </Avatar>\n                  <div style={{ display: 'flex', flexDirection: 'column' }}>\n                    <ChatUserName>{msg.userName}</ChatUserName>\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                      <ChatUserContents>{msg.content}</ChatUserContents>\n                      <ChatTime>{convertTime(msg.timeStamp)}</ChatTime>\n                    </div>\n                  </div>\n                </OthersChatBlock>\n              )) || (\n                <MyChatBlock key={uuidv4()}>\n                  <div\n                    style={{\n                      display: 'flex',\n                      alignItems: 'flex-end',\n                      flexDirection: 'row',\n                    }}\n                  >\n                    <ChatTime>{convertTime(msg.timeStamp)}</ChatTime>\n                    <ChatMyContents>{msg.content}</ChatMyContents>\n                  </div>\n                </MyChatBlock>\n              )\n        )}\n      </ChatContents>\n      <Chatinput\n        placeholder=\"Input your messages...\"\n        value={message}\n        allowClear\n        autoFocus\n        size=\"large\"\n        enterButton=\"Send\"\n        onChange={onChange}\n        onPressEnter={() => {\n          if (message.length > 0) {\n            const nowTime = Date.now();\n            const newMsgObj: Message = {} as Message;\n            newMsgObj.enterMsg = false;\n            newMsgObj.userName = userName;\n            newMsgObj.content = message;\n            newMsgObj.timeStamp = nowTime;\n            onRegisterNewMsg(newMsgObj);\n          }\n        }}\n        style={{ position: 'fixed', bottom: '0' }}\n      />\n    </>\n  );\n};\n\nexport default ChatScreen;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Input } from 'antd';\n\nconst LoginForm = styled.form`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translateX(-50%) translateY(-50%);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst LoginTitle = styled.div`\n  font-size: 1.5rem;\n  margin: 0.5rem;\n  margin-bottom: 2.5rem;\n  color: silver;\n`;\n\nconst LoginInput = styled(Input)`\n  font-size: 1.5rem;\n  font-weight: 400;\n  text-align: center;\n  width: 100%;\n  color: black;\n  background-color: slategray;\n`;\n\nconst LoginSubmit = styled.input`\n  display: none;\n`;\n\nconst Login = ({ userNickname, setUserNickname, onRegisterNickName }: any) => (\n  <LoginForm onSubmit={onRegisterNickName}>\n    <LoginTitle>닉네임을 입력하세요.</LoginTitle>\n    <LoginInput\n      value={userNickname}\n      autoFocus\n      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n        setUserNickname(e.target.value)\n      }\n    />\n    <LoginSubmit type=\"submit\" value=\"\" />\n  </LoginForm>\n);\n\nexport default Login;\n","import React, { useEffect } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { userNickname, msgHistory } from '../atom/Atoms';\n\nimport Login from '../Presenter/Login';\n\nexport const socket = new WebSocket(`ws://3.37.234.201:8080/chat`);\n\nconst LoginContainer = ({ setLoginState }: any) => {\n  const [userLoginName, setUserNickname] = useRecoilState(userNickname);\n  const [msgHistoryArr, setMsgHistory] = useRecoilState(msgHistory);\n\n  const onRegisterNickName = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    socket.send(\n      JSON.stringify({\n        name: userLoginName,\n        messageType: 'JOIN',\n        content: '새로운 유저가 닉네임 설정을 시도중입니다.',\n      })\n    );\n  };\n\n  socket.onmessage = (evt: MessageEvent) => {\n    const response = JSON.parse(evt.data);\n    switch (response.messageType) {\n      case 'ERROR':\n        setLoginState(false);\n        /* eslint-disable */\n        alert('중복된 닉네임입니다! 다시 입력해주세요.');\n        break;\n      case 'JOIN':\n        setLoginState(true);\n        setMsgHistory([\n          ...msgHistoryArr,\n          {\n            informMsg: true,\n            enterMsg: true,\n            userName: userLoginName,\n            content: '',\n            timeStamp: 0,\n          },\n        ]);\n        break;\n    }\n  };\n\n  useEffect(() => {\n    socket.onopen = () => {\n      console.log('Connected!');\n    };\n  }, []);\n\n  return (\n    <Login\n      userNickname={userLoginName}\n      setUserNickname={setUserNickname}\n      onRegisterNickName={onRegisterNickName}\n    />\n  );\n};\n\nexport default LoginContainer;\n","import React, { useEffect, useState } from 'react';\nimport { useRecoilValue, useRecoilState } from 'recoil';\nimport { userNickname, msgHistory } from '../atom/Atoms';\nimport ChatScreen from '../Presenter/ChatScreen';\n\nimport { socket } from './LoginContainer';\n\nimport { Message } from '../interface/types';\n\nconst ChatScreenContainer = () => {\n  const userName = useRecoilValue(userNickname);\n  const [msgHistoryArr, setMsgHistory] = useRecoilState(msgHistory);\n\n  const [message, setMessage] = useState<string>('');\n\n  const onRegisterNewMsg = (msgInfo: Message) => {\n    const newMessage: Message = msgInfo;\n\n    socket.send(\n      JSON.stringify({\n        name: newMessage.userName,\n        messageType: 'CHAT',\n        content: newMessage.content,\n        timestamp: newMessage.timeStamp,\n      })\n    );\n\n    setMessage('');\n  };\n\n  useEffect(() => {\n    socket.onmessage = (evt: MessageEvent) => {\n      const response = JSON.parse(evt.data);\n      switch (response.messageType) {\n        case 'CHAT':\n          setMsgHistory([\n            ...msgHistoryArr,\n            {\n              informMsg: false,\n              enterMsg: false,\n              userName: response.name,\n              content: response.content,\n              timeStamp: response.timestamp,\n            },\n          ]);\n          break;\n        case 'JOIN':\n          setMsgHistory([\n            ...msgHistoryArr,\n            {\n              informMsg: true,\n              enterMsg: true,\n              userName: response.content,\n              content: '',\n              timeStamp: 0,\n            },\n          ]);\n          break;\n        case 'LEAVE':\n          setMsgHistory([\n            ...msgHistoryArr,\n            {\n              informMsg: true,\n              enterMsg: false,\n              userName: response.content,\n              content: '',\n              timeStamp: 0,\n            },\n          ]);\n          break;\n      }\n    };\n  });\n\n  return (\n    <ChatScreen\n      msgHistory={msgHistoryArr}\n      onRegisterNewMsg={onRegisterNewMsg}\n      message={message}\n      setMessage={setMessage}\n      userName={userName}\n    />\n  );\n};\n\nexport default ChatScreenContainer;\n","import React, { useState } from 'react';\n\nimport ReactPlayer from 'react-player';\nimport ChatScreenContainer from './Container/ChatScreenContainer';\nimport LoginContainer from './Container/LoginContainer';\n\nconst App = () => {\n  const [loginState, setLoginState] = useState<Boolean>(false);\n  const [videoStart, setVideoStart] = useState(false);\n\n  return (\n    <div\n      className=\"App\"\n      style={{ width: '100%',  overflow: 'hidden' }}\n    >\n      <ReactPlayer\n        url=\"http://www.youtube.com/watch?v=NUKKzdVy0EI\"\n        playing\n        loop\n        controls={false}\n        muted={!videoStart}\n        width=\"100%\"\n        height=\"100%\"\n        onReady={() => console.log('video ready')}\n        onStart={() => {\n          console.log('video start');\n          setTimeout(() => {\n            setVideoStart(true);\n          }, 2000);\n        }}\n        onPlay={() => {\n          console.log('video play');\n          setTimeout(() => {\n            setVideoStart(true);\n          }, 2000);\n        }}\n        onError={() => console.log('video error')}\n        style={{\n          transition: '3s ease-in-out',\n          overflow: 'hidden',\n          position: 'fixed',\n          zIndex: -1,\n          filter: `blur(2px) brightness(${videoStart ? 0.8 : 0})`,\n        }}\n      />\n      {loginState === false ? (\n        <LoginContainer setLoginState={setLoginState} />\n      ) : (\n        <ChatScreenContainer />\n      )}\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}